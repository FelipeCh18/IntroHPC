Felipe Chaves Delgadillo - Workshop 3: Fixing a simple code with debugging tools

Comenzamos compilando el código para ver que error nos manda, 
nos arroja este error:

"/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x1b): undefined reference to `main'
collect2: error: ld returned 1 exit status"

Al inspeccionar el código nos damos cuenta que hay un
error en la línea 34 por lo que arreglamos el código
manualmente poniendo un punto y coma:

return std::sqrt(x)
                   |
                   |
                   |
                   v
return std::sqrt(x);

Aún así, el compilador nos arroja el mismo error:

"/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x1b): undefined reference to `main'
collect2: error: ld returned 1 exit status"

Al ejecutar el comando "g++ -g -fsanitize=address,leak,undefined report.cpp",
el sanitizer nos arroja el siguiente error en la línea 32:

report.cpp: In function ‘double baz(double)’:
report.cpp:32:14: error: return-statement with no value, in function returning ‘double’ [-fpermissive]
   32 |   if (x = 0) return;
      |              ^~~~~~

por lo que procedemos a retornar un 0 para darle un sentido a la instrucción:

if (x = 0) return;
                 |
                 |
                 |
                 v
if (x = 0) return 0;

Después de ejecutar el mismo comando anterior, la consola nos arroja el siguiente error:

report.cpp:21:52: runtime error: division by zero
AddressSanitizer:DEADLYSIGNAL
=================================================================
==10834==ERROR: AddressSanitizer: FPE on unknown address 0x5561f32f03f7 (pc 0x5561f32f03f7 bp 0x7ffef07dfc80 sp 0x7ffef07dfc40 T0)
    #0 0x5561f32f03f7 in foo(int, int) /home/felipech/IntroHPC/Workshop 3/report.cpp:21
    #1 0x5561f32f02b8 in main /home/felipech/IntroHPC/Workshop 3/report.cpp:14
    #2 0x7f13d9500d8f in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58
    #3 0x7f13d9500e3f in __libc_start_main_impl ../csu/libc-start.c:392
    #4 0x5561f32f01c4 in _start (/home/felipech/IntroHPC/Workshop 3/a.out+0x11c4)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: FPE /home/felipech/IntroHPC/Workshop 3/report.cpp:21 in foo(int, int)
==10834==ABORTING

Leyendo detenidamente el error, nos damos cuenta que el problema está en la línea 21 aunque en realidad,
el problema se encuentra en la línea 12, ya que "ii = 0" es un argumento que le entra a la función "foo(a,b)"
y debido a la definición de la función, tanto "a" como "b" son divisores por lo que se da el error de division por cero,
esto se puede cambiar solo cambiando el valor de 0 a 1:

ii =  0;
      |
      |
      |
      v
ii =  1;

finalmente, ejecutando el mismo comando de sanitizer anterior, el ejecutable a.out no contiene nada por lo que asumimos 
que ya no se presentan errores y el código funciona bien pero para estar más seguros, vamos a realizar un análisis con valgrind
en busca de fugas de memoria, etc, para dejar completamente depurado el código por lo que al ejecutar el comando 
"valgrind --tool=memcheck --track-origins=yes --leak-check=full ./a.out" nos sale el siguiente mensaje:

==243312== Memcheck, a memory error detector
==243312== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==243312== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==243312== Command: ./a.out
==243312== 
==243312== 
==243312== HEAP SUMMARY:
==243312==     in use at exit: 0 bytes in 0 blocks
==243312==   total heap usage: 1 allocs, 1 frees, 72,704 bytes allocated
==243312== 
==243312== All heap blocks were freed -- no leaks are possible
==243312== 
==243312== For lists of detected and suppressed errors, rerun with: -s
==243312== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

por lo que nos damos cuenta de que el código está optimizado al máximo sin errores ni fugas de memoria.

Por último, compilamos el programa con el comando "g++ -Wall report.cpp" el cual nos arroja los siguientes errores
en la línea 32 y 33:

report.cpp: In function ‘double baz(double)’:
report.cpp:32:9: warning: suggest parentheses around assignment used as truth value [-Wparentheses]
   32 |   if (x = 0) return 0;
      |       ~~^~~
report.cpp:33:10: warning: unused variable ‘v’ [-Wunused-variable]
   33 |   double v = 1-(x+1);
      |          ^

Por lo que, para arreglar el primer error, debemos agregar un igual dentro del condicional, esto para que la comparación
del condicional se haga correctamente:

if (x = 0) return 0;
      |
      |
      |
      v
if (x == 0) return 0;

Lo siguiente que hacemos para arreglar el segundo error es tener en cuenta que la variable "v" no se está utilizando,
lo cual genera gasto de memoria innecesario por lo que para hacerla útil para el programa, podemos cambiar
el argumento de la función de retorno de la función "baz":

return std::sqrt(x);
                 |
                 |
                 |
                 v
return std::sqrt(v);

Con esto finalmente el código está optimizado y completamente funcional y sin errores en ninguno de los tres depuradores:
Sanitizers, Valgrind, -Wall.

